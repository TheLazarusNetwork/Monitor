package main

import (
	"fmt"
	"time"

	"github.com/TheLazarusNetwork/Monitor/datastore"
	"github.com/TheLazarusNetwork/Monitor/model"
	"github.com/TheLazarusNetwork/Monitor/utility"

	"github.com/nxadm/tail"
	"github.com/textileio/go-threads/db"
	"github.com/textileio/go-threads/util"
)

const (
	fileName = "test.log"
)

func main() {
	datastore, clean := datastore.CreateDB()
	defer clean()

	collection, err := datastore.NewCollection(db.CollectionConfig{
		Name:   "Log",
		Schema: util.SchemaFromInstance(&model.Log{}, false),
	})
	utility.CheckError(err)

	// Bootstrap the collection with 1 test log
	{
		// Create a Test Log
		testLog := &model.Log{
			Timestamp: time.Now(),
			Type:      "INFO",
			Data:      "Text Text 1",
		}
		_, err = collection.Create(util.JSONFromInstance(testLog))
		utility.CheckError(err)
	}

	// Query all the logs
	{
		logs, err := collection.Find(&db.Query{})
		utility.CheckError(err)
		if len(logs) != 1 {
			panic("More than 1 log found")
		}
	}

	t, err := tail.TailFile(fileName, tail.Config{Follow: true})
	utility.CheckError(err)

	for line := range t.Lines {
		fmt.Println(line.Text)

		// ID is autogenerated when omitted
		entry := &model.Log{
			Timestamp: time.Now(),
			Type:      "INFO",
			Data:      line.Text,
		}

		_, err = collection.Create(util.JSONFromInstance(entry))
		utility.CheckError(err)
	}
}
